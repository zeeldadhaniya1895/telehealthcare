datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
enum UserRole{
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean    @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id              String          @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model VerificationToken {
  id         String @id @default(cuid())
  email      String 
  token      String @unique
  expires    DateTime
 
  @@unique([id, token])
}

model PasswordResetToken {
  id         String @id @default(cuid())
  email      String 
  token      String @unique
  expires    DateTime
 
  @@unique([id, token])
}

model TwoFactorToken {
  id         String @id @default(cuid())
  email      String 
  token      String @unique
  expires    DateTime
 
  @@unique([id, token])
}
 
model TwoFactorConfirmation{
  id         String @id @default(cuid())
  userId     String
  
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@unique([userId])
}

model Card {
  id          Int      @id @default(autoincrement())
  imageUrl    String   // Path to the image on your device
  title       String   // Title of the card
  description String   // Description below the image
  createdAt   DateTime @default(now()) // Auto timestamp
}

model Doctor {
  id            Int     @id @default(autoincrement()) // Primary key with auto-increment
  name          String  // Name of the doctor
  specialty     String  // Specialty of the doctor
  degree        String  // Degree of the doctor
  rating        Float?  // Rating (decimal with 2 precision)
  consultingFee Int     // Consulting fee (in Integer)
  description   String  // Description of the doctor

  @@map("doctors") // Optional: Maps the Prisma model to an existing "doctors" table in the database
}
